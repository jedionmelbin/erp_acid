@model eRPBusiness.Transport.PerfilDTO
@using eRPBusiness.Helpers
<div class="row">
    <div class="col-lg-12">
        <nav class="btn-toolbar text-left titleuser">
            <a href="#" data-toggle="sidebar"><span class="glyphicon glyphicon-option-vertical"></span></a>
            <label>Nuevo Perfil</label>
        </nav>
    </div>
</div>
@Html.CRM().MenuBar("MenuBar", "onClickMenuBar", new ItemMenuBar[]{
                                                   new ItemMenuBar(MenuBarButtonType.Save),
                                                   new ItemMenuBar(MenuBarButtonType.Exit)

                                               })
<div class="row">
    <div class="col-lg-12">
        <div class="panel panel-default">
            <div class="panel-body">
                @using (Html.BeginForm("", "", FormMethod.Post, new { @class = "form-horizontal", @id = "form1" }))
                {
                    @Html.AntiForgeryToken()
                    <div class="col-lg-6">
                        @*<div class="form-group">
                                @Html.CRM().TextBoxFor(m => m.Codigo, "col-lg-4", "Codigo", "col-lg-2").Attributes(new { @maxlength = "4" })
                            </div>*@
                        <div class="form-group">
                            @Html.CRM().TextBoxFor(m => m.Nombre, "col-lg-10", "Nombre", "col-lg-2")
                        </div>
                    </div>

                    @Html.HiddenFor(m => m.PerfilId)
                }
            </div>
        </div>
    </div>

</div>

<div class="row">
    <div class="col-lg-6">

        <div id="list" class="list-group">
            <div class="list-group-item">Item 1</div>
            <div class="list-group-item">Item 2</div>
            <div class="list-group-item">Item 3</div>
            <div class="list-group-item">Item 4</div>
        </div>


    </div>
    <div class="col-lg-6">
        <div id="list2" class="list-group">
            <div class="list-group-item tinted">Item 1</div>
            <div class="list-group-item tinted">Item 2</div>
            <div class="list-group-item tinted">Item 3</div>
        </div>
    </div>
</div>


@*HANDLERBAR*@
<script id="perfilesTemplate" type="text/x-handlebars-template">
    {{#each perfiles}}
    <div class="perfil">
        <div class="info-column">
            <h2>{{nombre}}</h2>
        </div>
    </div>
    {{/each}}
</script>




<script type="text/javascript">
    //https://github.com/SortableJS/Sortable
    $(document).ready(function () {
        Sortable.create(list, {
            group: 'shared',
            multiDrag: true,
           // multiDragKey: null, // Key that must be down for items to be selected
            selectedClass: "selected",
            animation: 150,
            onChange: function (/**Event*/evt) {
                evt.newIndex // most likely why this event is used is to get the dragging element's current index
                //alert();
            }
        });

        Sortable.create(list2, {
            group: 'shared',
            multiDrag: true,
            selectedClass: "selected",
            animation: 150
        });
    });

    //HANDLERBAR
    var ourRequest = new XMLHttpRequest();
    ourRequest.open('GET', 'https://learnwebcode.github.io/json-example/pets-data.json');
    ourRequest.onload = function () {
        if (ourRequest.status >= 200 && ourRequest.status < 400) {
            var data = JSON.parse(ourRequest.responseText);
            createHTML(data);
        } else {
            console.log("Intentamos conectarnos, pero ha ocurrido un error.");
        }
    };

    ourRequest.onerror = function () {
        console.log("Error de conexion, saludos.");
    };

    ourRequest.send();

    //Handlebars.registerHelper("calculateAge", function (birthYear) {
    //    var age = new Date().getFullYear() - birthYear;

    //    if (age > 0) {
    //        return age + " years old";
    //    } else {
    //        return "Less than a year old";
    //    }

    //});

    function createHTML(perfilesData) {
        var rawTemplate = document.getElementById("perfilesTemplate").innerHTML;
        var compiledTemplate = Handlebars.compile(rawTemplate);
        var ourGeneratedHTML = compiledTemplate(perfilesData);

        var perfilesContainer = document.getElementById("pets-container");
        perfilesContainer.innerHTML = ourGeneratedHTML;
    }








    function onClickMenuBar(control) {
        switch (control) {
            case '@ButtonMenuBarActionConstant.SAVE':
                saveData(control);
                break;
            case '@ButtonMenuBarActionConstant.DELETE':

                break;
            case '@ButtonMenuBarActionConstant.EXIT':
                controllerGetAction('@Url.Action("Bandeja", "Perfil", new { area = "CG" })', null, 'workspace', false, false, null);
                break;
        }

    };

    function saveData() {
        if (isEmptyElement("Nombre", "Ingrese nombre"))
            return false;


        var form = $('#form1');
        var token = $('input[name="__RequestVerificationToken"]', form).val();
        var jsonData = {
            __RequestVerificationToken: token,
            Header: JSON.stringify($('#form1').serializeObject()),
            EditAction: $("#EditAction").val()
        };
        controllerSaveResponse("@Url.Action("Create", "Perfil", new { area = "CG" })", jsonData, false, false, function (response) {
            if (response.success) {
                MsgAlert(1, response.message);
                //controllerGetAction('@Url.Action("Bandeja", "Perfil", new { area = "CG" })', null, 'workspace', false, false, null);
            } else {
                MsgAlert(4, response.message);
            }
        });
    }
</script>