@model eRPBusiness.Transport.MovimientoAlmacenDTO
@using eRPBusiness.Helpers;
@using eRPBusiness.Common;
@{

}
<div class="row">
    <div class="col-lg-12">
        <nav class="btn-toolbar text-left titleuser">
            <a href="#" data-toggle="sidebar"><span class="glyphicon glyphicon-option-vertical"></span></a>
            <label>@ViewBag.Title</label>
        </nav>
    </div>
</div>
@Html.CRM().MenuBar("MenuBar", "onClickMenuBar", new ItemMenuBar[]{
new ItemMenuBar(MenuBarButtonType.Save),
new ItemMenuBar(MenuBarButtonType.Print,true),
new ItemMenuBar(MenuBarButtonType.Exit)
})
<div class="row">
    <div class="col-lg-12">
        <div class="panel panel-default">
            <div class="panel-body form-horizontal">
                @using (Html.BeginForm("", "", FormMethod.Post, new { @id = "form1" }))
                {
                    @Html.AntiForgeryToken()
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.CRM().TextBoxFor(m => m.Codigo, "col-lg-4", "Nro Ing.", "col-lg-2").Attributes(new { @placeholder = "Nro Ingreso", @readonly = "true" })
                            @Html.CRM().DateTimePickerFor(m => m.FechaMovimiento, "col-lg-4", "Fecha Emision", "col-lg-2").PickerType(DateTimePickerType.Date).Attributes(new { })
                        </div>
                        <div class="form-group">
                            @if (ViewBag.IsNew)
                            {
                                @Html.CRM().Select2List("DocumentoComercialId", Model.DocumentoComercialId, @ViewBag.DocComerciaList, "col-lg-10", "Tipo Doc.", "col-lg-2")
                            }
                            else
                            {
                                @Html.CRM().Select2List("DocumentoComercialId", Model.DocumentoComercialId, @ViewBag.DocComerciaList, "col-lg-10", "Tipo Doc.", "col-lg-2", new { @disabled = "true" })
                            }

                        </div>
                        <div class="form-group">
                            @if (ViewBag.IsNew)
                            {
                                @Html.CRM().TextBoxButton("NumeroOrdenCompra", Model.NumeroOrdenCompra, "col-lg-4", "O. C.", "col-lg-2").OnButtonClick("$('#myModalOrdenCompra').modal('show')").FontButton("glyphicon glyphicon-search").Attributes(new { @placeholder = "Orden de compra" })
                                @Html.CRM().TextBox("NumeroAdicional", Model.NumeroAdicional, "col-lg-4", "Nro Doc.", "col-lg-2").Attributes(new { @placeholder = "Nro documento" })

                            }
                            else
                            {
                                @Html.CRM().TextBoxButton("NumeroOrdenCompra", Model.NumeroOrdenCompra, "col-lg-4", "O. C.", "col-lg-2").OnButtonClick("$('#myModalOrdenCompra').modal('show')").FontButton("glyphicon glyphicon-search").Attributes(new { @readonly = "true", @placeholder = "Orden de compra" })
                                @Html.CRM().TextBox("NumeroAdicional", Model.NumeroAdicional, "col-lg-4", "Nro Doc.", "col-lg-2").Attributes(new { @readonly = "true", @placeholder = "Nro documento" })

                            }

                        </div>
                        <div class="form-group" id="divOrdenCompra">
                            @if (ViewBag.IsNew)
                            {
                                @Html.CRM().Select2List("TipoMovimientoId", Model.TipoMovimientoId, @ViewBag.TipoMovimimentoList, "col-lg-4", "Ingresos", "col-lg-2", new { @onchange = "onChangeMovimiento(this)", @disabled = "true" })
                                @Html.CRM().Select2List("TipoOperacionId", Model.TipoOperacionId, @ViewBag.TipoOperacionList, "col-lg-4", "Concepto", "col-lg-2", new { @onchange = "onChangeOperacion(this)" })
                            }
                            else
                            {
                                @Html.CRM().Select2List("TipoMovimientoId", Model.TipoMovimientoId, @ViewBag.TipoMovimimentoList, "col-lg-4", "Ingresos", "col-lg-2", new { @onchange = "onChangeMovimiento(this)", @disabled = "true" })
                                @Html.CRM().Select2List("TipoOperacionId", Model.TipoOperacionId, @ViewBag.TipoOperacionList, "col-lg-4", "Concepto", "col-lg-2", new { @onchange = "onChangeOperacion(this)", @disabled = "true" })
                            }
                        </div>

                        <div class="form-group">
                            @if (ViewBag.IsNew)
                            {
                                @Html.CRM().Select2List("MonedaId", Model.MonedaId, @ViewBag.MonedaList, "col-lg-4", "Moneda", "col-lg-2")
                                @Html.CRM().Select2List("ImpuestoId", Model.ImpuestoId, @ViewBag.ImpuestoList, "col-lg-4", "IGV", "col-lg-2", new {@onchange= "onClickOkImpuesto(this)" })
                            }
                            else
                            { @Html.CRM().Select2List("MonedaId", Model.MonedaId, @ViewBag.MonedaList, "col-lg-4", "Moneda", "col-lg-2", new { @disabled = "disabled" })
                            @Html.CRM().Select2List("ImpuestoId", Model.ImpuestoId, @ViewBag.ImpuestoList, "col-lg-4", "IGV", "col-lg-2", new { @disabled = "true" })
                        }

                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.CRM().Select2List("AlmacenId", Model.AlmacenId, @ViewBag.almacenList, "col-lg-10", "Almacen", "col-lg-2", new { @disabled = "true" })
                        </div>
                        <div class="form-group">
                            @if (ViewBag.IsNew)
                            {
                                @Html.CRM().TextBoxButtonFor(m => m.NumeroRuc, "col-lg-5", "R.U.C", "col-lg-2").OnButtonClick("onChangeRucCliente()").FontButton("glyphicon glyphicon-search").Attributes(new { @placeholder = "R.U.C" })
                            }
                            else
                            {
                                @Html.CRM().TextBoxButtonFor(m => m.NumeroRuc, "col-lg-5", "R.U.C", "col-lg-2").OnButtonClick("onChangeRucCliente()").FontButton("glyphicon glyphicon-search").Attributes(new { @placeholder = "R.U.C", @readonly = "true" })
                            }
                        </div>
                        <div class="form-group">
                            @if (ViewBag.IsNew)
                            {
                                @Html.CRM().Select2List("ClienteId", Model.ClienteId, ViewBag.ListarCliente, "col-lg-10", "Proveedor", "col-lg-2")
                            }
                            else
                            {
                                @Html.CRM().Select2List("ClienteId", Model.ClienteId, ViewBag.ListarCliente, "col-lg-10", "Proveedor", "col-lg-2", new { @disabled = "true" })
                            }

                        </div>
                        <div class="form-group">
                            @Html.CRM().TextAreaFor(m => m.Observacion, "col-md-10", "Observación", "col-lg-2").Attributes(new { @placeholder = "Observaciones" })
                        </div>
                    </div>
                    @Html.HiddenFor(m => m.MovimientoAlmacenId)
                    @Html.HiddenFor(m => m.EstadoOperacionId)
                    @Html.HiddenFor(m => m.PersonalId)
                    @Html.HiddenFor(m => m.EditAction)
                    @Html.Hidden("rowId")
                    @Html.Hidden("countId")
                    @Html.Hidden("rowBienId")
                }
            </div>
        </div>
    </div>

</div>
<div class="row">
    <div class="col-lg-12 col-md-12">
        <div class="panel panel-default">
            <div class="panel-heading">
                @Html.CRM().MenuBar("BienesMenuBar", "onClickBienesMenuBar", new ItemMenuBar[]{
                                                                                    new ItemMenuBar(MenuBarButtonType.New,  false ),
                                                                                    new ItemMenuBar(MenuBarButtonType.Edit,true),
                                                                                    new ItemMenuBar(MenuBarButtonType.Save,true),
                                                                                    new ItemMenuBar(MenuBarButtonType.Cancel,true)
                                                                                }, MenuBarType.Small)
            </div>
            <div class="panel-body" id="panel">
                <table id="jqGridDetalle"></table>
                <div id="jqGridPager"></div>
            </div>
        </div>
    </div>
</div>

@using (Html.CRM().Popup("myModalProducto", "Bienes y Servicios", "onClickOkProducto", SizePopup.Large))
{
    <div id="divProductoContent"></div>
}

@using (Html.CRM().Popup("myModalOrdenCompra", "Orden de Compra", "onClickOkOrdenCom", SizePopup.Large))
{
    <div id="divOrdenCompraContent"></div>
}


@using (Html.CRM().Popup("myModalLoteProducto", "Control Producto", "onClickOkLote", SizePopup.Large))
{
    <div id="divLoteProdContent"></div>
}



<script type="text/javascript">
    var _widthPanel = $("#panel").width();
    var _heightGrid = getHeightForResize(100);
    $(document).ready(function () {
        var unidadList = localStorage.getItem('unidadList');
        var marcaLista = localStorage.getItem('marcaLista');

        if (jQuery.isEmptyObject(unidadList)) {
            $.post("@Url.Action("ListUnidadMedida")", function (response) {
                localStorage.setItem('unidadList', addItem(response));
            });
        }
        if (jQuery.isEmptyObject(marcaLista)) {
            $.post("@Url.Action("ListarMarca")", function (response) {
                localStorage.setItem('marcaLista', addJqItem(response.data));
            });
        }


        $("#jqGridDetalle").jqGrid({
            url: '@Url.Action("ListarItem", "Ingresos", new { area = "lg" })',
            postData: {
                movimientoAlmacenId: function () { return $("#MovimientoAlmacenId").val(); }
            },
            mtype: "POST",
            datatype: "json",
            colModel: [
                { label: 'Id', name: 'MovimientoAlmacenBienId', hidden: true, key: true },
                { label: '', name: 'MovimientoAlmacenId', hidden: true, formatter: 'integer' },
                { label: '', name: 'BienServicioId', hidden: true, formatter: 'integer' },
                { label: '', name: 'BienAlmacenId', hidden: true, formatter: 'integer' },
                { label: 'Código', name: 'Codigo', width: 20, sortable: false },
                { label: 'Cód Comercial', name: 'CodigoComercial', width: 20, sortable: false },
                { label: 'Descripción', name: 'Descripcion', width: 75, sortable: false },
                { label: 'U.M', name: 'UnidadMedidaId', width: 20, edittype: 'select', formatter: 'select', sortable: false, editable: true, editoptions: {
                          disabled: 'disabled'
                    }
                },
                {
                    label: 'LT', name: 'Lote', width: 6, sortable: false,align:'center', formatter: function (cellvalue, options, rowObject) {
                        return '<button type="button" data-value="' + options.rowId +'" onclick="onRowLote(this)" value="' + rowObject.BienServicioId +'"><span class="glyphicon glyphicon-list-alt"></span></button>';
                    }
                },
                {
                    label: 'Marca', name: 'MarcaId', width: 30, edittype: 'select', formatter: 'select', sortable: false, hidden:true, editable: true, editoptions: {
                          disabled: 'disabled'
                    }
                },
                {
                    label: 'Costo Unitario', name: 'ValorUnitario', width: 20, editable: true, formatter: 'integer', align: 'right', sortable: false,
                    formatoptions: { decimalSeparator: ".", thousandsSeparator: " ", decimalPlaces: 2 }, editoptions: {
                        dataInit: function (elem, options) {
                            $(elem).inputmask('decimal', {
                                placeholder: "0", digits: 2, digitsOptional: false,
                                radixPoint: ".", groupSeparator: "", autoGroup: true,
                                allowPlus: false, allowMinus: false, clearMaskOnLostFocus: false, removeMaskOnSubmit: true,
                            });
                            $(elem).blur(function () {
                                var rowId = $(elem).parent().parent().attr('id');
                                var row = $('#jqGridDetalle').jqGrid("getLocalRow", rowId);
                                var valorUnitario = stringToDecimal($(elem).val());
                                var cantidad = $("#" + rowId + "_Cantidad").val();
                                if (isNaN(valorUnitario))
                                    valorUnitario = 0;

                                var costoPrecioCantidad = multiplicar(valorUnitario, cantidad);
                                var totalCostoDirecto = round(costoPrecioCantidad, 2);

                                if (cantidad > 0)
                                    $('#jqGridDetalle').jqGrid('setCell', rowId, 'Importe', totalCostoDirecto);

                                var subTotal = $("#jqGridDetalle").jqGrid('getCol', 'Importe', false, 'sum');
                                $("#jqGridDetalle").jqGrid('footerData', 'set', {
                                    Producto: 'Importe',
                                    Importe: subTotal
                                });

                            });
                        }
                    }
                },
                {
                    label: 'Cantidad', name: 'Cantidad', width: 17, editable: true, formatter: 'integer', align: 'right', sortable: false, formatoptions: {
                        decimalSeparator: ".", thousandsSeparator: " ", decimalPlaces: 2
                    }, editoptions: {
                        dataInit: function (elem, options) {
                            $(elem).inputmask('decimal', { placeholder: "0", digits: 2, digitsOptional: false,
                                radixPoint: ".",groupSeparator: "", autoGroup: true,
                                allowPlus: false, allowMinus: false,clearMaskOnLostFocus: false,removeMaskOnSubmit: true
                            });
                            $(elem).blur(function () {

                                var rowId = $(elem).parent().parent().attr('id');
                                var row = $('#jqGridDetalle').jqGrid("getLocalRow", rowId);
                                var cantidad = stringToDecimal($(elem).val());
                                var valorUnitario = $("#" + rowId + "_ValorUnitario").val();
                                if (isNaN(valorUnitario))
                                    valorUnitario = 0;

                                var costoPrecioCantidad = multiplicar(valorUnitario, cantidad);
                                var totalCostoDirecto = round(costoPrecioCantidad, 2);


                                if (cantidad > 0)
                                    $('#jqGridDetalle').jqGrid('setCell', rowId, 'Importe', totalCostoDirecto);

                                var subTotal = $("#jqGridDetalle").jqGrid('getCol', 'Importe', false, 'sum');
                                $("#jqGridDetalle").jqGrid('footerData', 'set', {
                                    Producto: 'Importe',
                                    Importe: subTotal
                                });

                            });
                        }
                    }
                },
                {
                    label: 'Peso Neto', name: 'PesoNeto', width: 20, editable: true, formatter: 'integer', align: 'right', sortable: false, hidden: false,
                     formatoptions: { decimalSeparator: ".", thousandsSeparator: " ", decimalPlaces: 2 }, editoptions: {
                         dataInit: function (elem, options) {
                             $(elem).inputmask('decimal', {
                                 placeholder: "0", digits: 2, digitsOptional: false,
                                 radixPoint: ".", groupSeparator: "", autoGroup: true,
                                 allowPlus: false, allowMinus: false, clearMaskOnLostFocus: false, removeMaskOnSubmit: true,

                             });
                         }
                     }
                 },
                {
                    label: 'Peso Bruto', name: 'PesoBruto', width: 20, editable: true, formatter: 'integer', align: 'right', sortable: false, hidden: false,
                     formatoptions: { decimalSeparator: ".", thousandsSeparator: " ", decimalPlaces: 2 }, editoptions: {
                         dataInit: function (elem, options) {
                             $(elem).inputmask('decimal', {
                                 placeholder: "0", digits: 2, digitsOptional: false,
                                 radixPoint: ".", groupSeparator: "", autoGroup: true,
                                 allowPlus: false, allowMinus: false, clearMaskOnLostFocus: false, removeMaskOnSubmit: true

                             });
                         }
                     }
                 },
                {
                    label: 'Importe', name: 'Importe', width: 17, editable: false, formatter: 'integer', align: 'right', sortable: false,
                    formatoptions: { decimalSeparator: ".", thousandsSeparator: " ", decimalPlaces: 2 }, editoptions: {
                        readonly: 'readonly',
                        dataInit: function (elem, options) {
                            $(elem).inputmask('decimal', {
                                placeholder: "0",
                                digits: 2,
                                digitsOptional: false,
                                autoGroup: true,
                                allowPlus: false,
                                allowMinus: false,
                                clearMaskOnLostFocus: false,
                                removeMaskOnSubmit: true
                            });
                        }
                    }
                },
                {
                    label: "Row",
                    name: "RowsLst",
                    hidden:true,
                },
                {
                      label: "Eliminar",
                      name: "actions",
                      width: 10,
                      sortable: false,
                      align:'center',
                      formatter: function (cellvalue, options, rowObject) {
                          return "<a href='#' id='" + options.rowId + "' onClick='fnDeleteRow(this)' ><span class='glyphicon glyphicon-trash'></span></a>";
                      }
                      /*formatter: "actions",
                      formatoptions: {
                          keys: true,
                          editOptions: {},
                          addOptions: {},
                          delOptions: {
                              beforeSubmit: function (rowid) {
                                  $(this).jqGrid('delRowData', rowid);
                              }
                          }
                      }*/
                  }

            ],
            viewrecords: false,
            rownumbers: true,
            footerrow: true,
            //scroll: 1,
            //emptyrecords: '',
            loadonce: true,
            beforeProcessing: function (data) {
                $(this).setColProp('UnidadMedidaId', { editoptions: { value: unidadList } });
                $(this).setColProp('MarcaId', { editoptions: { value: marcaLista } });
            },
            loadComplete: function () {
                var grid = $(this);
                precioVenta = grid.jqGrid('getCol', 'PrecioVenta', false, 'sum');
                cantidad = grid.jqGrid('getCol', 'Cantidad', false, 'sum');
                pesoNeto = grid.jqGrid('getCol', 'PesoNeto', false, 'sum');
                pesoBruto = grid.jqGrid('getCol', 'PesoBruto', false, 'sum');
                valorUnitario = grid.jqGrid('getCol', 'ValorUnitario', false, 'sum');
                subTotal = grid.jqGrid('getCol', 'Importe', false, 'sum');


                grid.jqGrid('footerData', 'set', {
                    Producto: 'Importe',
                    Cantidad: cantidad,
                    PesoNeto: pesoNeto,
                    PesoBruto: pesoBruto,
                    ValorUnitario: valorUnitario,
                    Importe: subTotal
                });
            },
            pager: "#jqGridPager",
            height: (_heightGrid - 430),
            width: _widthPanel
        });


        $("#myModalLoteProducto").on('show.bs.modal', function () {
            $(this).find('input:text').val('');
            controllerGetAction('@Url.Action("LoteProductoEdit", "Ingresos")', null, 'divLoteProdContent', false, false, function () { });
        });

        $('#myModalLoteProducto').on('hidden.bs.modal', function (e) {
            $('#divLoteProdContent').empty();
        });

        $("#myModalProducto").on('show.bs.modal', function () {
            $(this).find('input:text').val('');
            controllerGetAction('@Url.Action("ProductoEdit", "Ingresos")', null, 'divProductoContent', false, false, function () { });
        });

        $('#myModalProducto').on('hidden.bs.modal', function (e) {
            $('#divProductoContent').empty();
        });

        $("#myModalOrdenCompra").on('show.bs.modal', function () {
            $(this).find('input:text').val('');
            controllerGetAction('@Url.Action("OrdenCompraEdit", "Ingresos")', null, 'divOrdenCompraContent', false, false, function () { });
        });

        $('#myModalOrdenCompra').on('hidden.bs.modal', function (e) {
            $('#divOrdenCompraContent').empty();
        });

        $("#ClienteId").select2({
            ajax: {
                url: '@Url.Action("GetCliente")',
                dataType: 'json',
                delay: 250,
                type: 'POST',
                data: function (params) {
                    return {
                        query: params.term // search ter
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: $.map(data.data, function (item) {
                            return {
                                text: item.RazonSocial,
                                id: item.ClienteId
                            }
                        })
                    };
                },
                cache: true
            },
            placeholder: 'Busqueda de proveedor / razon social, numero de ruc',
            allowClear: true,
            escapeMarkup: function (markup) { return markup; }, // let our custom formatter work
            minimumInputLength: 1,
            language: {
                inputTooShort: function () {
                    return "Busqueda de proveedor razon social, numero de ruc";
                }
            }
        });

        $('#ClienteId').on('select2:select', function (e) {
            var data = e.params.data;

            $.post('@Url.Action("BuscarPorId", "Ingresos")', { id: data.id }, function (response) {
                if (response.success) {
                    $("#NumeroRuc").val(response.data.NumeroDocumento);
                    $("#RazonSocial").val(response.data.RazonSocial);
                    $("#Direccion").val(response.data.NombreDireccion);
                } else {
                    MsgAlert(3, response.message);
                }
            });
        });


    });





    function fnDeleteRow(control) {
         $("#jqGridDetalle").jqGrid('delRowData', control.id);

         var allRowsOnCurrentPage = $('#jqGridDetalle').jqGrid('getDataIDs');
         var _valorUnitario = 0;
         $.each(allRowsOnCurrentPage, function (item, value) {
              _valorUnitario += stringToDecimal($('#' + value + '_ValorUnitario').val());

         });

        var subTotal = $("#jqGridDetalle").jqGrid('getCol', 'Importe', false, 'sum')
         $("#jqGridDetalle").jqGrid('footerData', 'set', {
             Producto: 'Importe',
             ValorUnitario: _valorUnitario,
             Importe: subTotal
         });
     }

    function onClickMenuBar(key) {
        var editAction = $("#EditAction").val();
        switch (key) {
            case '@ButtonMenuBarActionConstant.SAVE':
                insertData();
                break;
            case '@ButtonMenuBarActionConstant.DELETE':
                break;
            case '@ButtonMenuBarActionConstant.EXIT':
                controllerGetAction('@Url.Action("Bandeja", "Ingresos", new { area = "LG" })', null, 'workspace', false, false, null);
                break;
        }
    }

    function insertData() {

        if (isEmptyElement("FechaMovimiento", "Seleccione fecha"))
            return false;

        if (isEmptyElement("DocumentoComercialId", "Seleccione documento comercial"))
            return false;

        if (isEmptyElement("TipoMovimientoId", "Seleccione Ingresos."))
            return false;

        if (isEmptyElement("TipoOperacionId", "Seleccione operación."))
            return false;

        if (isEmptyElement("AlmacenId", "Seleccione un almacen."))
            return false;


        gridDataIDs('jqGridDetalle').forEach(function (index) {
            $("#jqGridDetalle").jqGrid('saveRow', index, { url: 'clientArray' });
        });

        var form = $('#form1');
        var token = $('input[name="__RequestVerificationToken"]', form).val();
        var disabled = form.find('select:disabled').removeAttr('disabled');

        var data = $('#jqGridDetalle').getRowData();
        $.each(data, function (item, value) {
            value.Lote = '';
        });
        if (jQuery.isEmptyObject(data)) {
            MsgAlert(3, "Selecciona almenos un bien o servicio.");
            return false;
        }
        var jsonData = {
            __RequestVerificationToken: token,
            Header: JSON.stringify($(form).serializeObject()),
            Row: JSON.stringify(data),
            EditAction: $("#EditAction").val(),
            Detail: JSON.stringify($('#form3').serializeObject())
        };
        controllerSaveResponse("@Url.Action("Create", "Ingresos", new { area = "LG" })", jsonData, true, true, function (response) {
            if (response.success) {
                MsgAlert(1, response.message);
                controllerGetAction('@Url.Action("Bandeja", "Ingresos", new { area = "LG" })', null, 'workspace', false, false, null);
            } else {
                MsgAlert(4, response.message);
            }
        });
    }

    function onClickRowProducto(row) {
        $("#ProductoId").val(row.ProductoId);
        $("#Producto").val(row.Codigo);
        $("#Descripcion").val(row.Descripcion);
        $("#myModalProducto").modal('hide');
    };


     function onClickOkImpuesto() {

          var jsonList = [];
            var selectedIDs = $('#jqGridDetalle').jqGrid('getGridParam', 'data');
            $.each(selectedIDs, function (item, value) {
                jsonList.push(value);
            });

            var rowList = _.map(jsonList, 'BienServicioId');
            var rowObject = [];
            jQuery.ajax({
                type: 'POST',
                url: '@Url.Action("ListarBienPrecio")',
                dataType: 'json',
                cache: false,
                data: {
                    data: JSON.stringify(rowList),
                    monedaId: $("#MonedaId").val(),
                    impuestoId: $("#ImpuestoId").val()
                },
                success: function (response) {
                    if (response.success) {
                        $('#jqGridDetalle').jqGrid('clearGridData');
                        $.each(response.data.lista, function (item, value) {
                            var bienServicios = {
                                MovimientoAlmacenBienId: 0,
                                MovimientoAlmacenId: 0,
                                BienAlmacenId: value.BienAlmacenId,
                                BienServicioId: value.BienServicioId,
                                Codigo: value.Codigo,
                                CodigoComercial: value.CodigoComercial,
                                Descripcion: value.Descripcion,
                                MarcaId: value.MarcaId,
                                Control: 0,
                                UnidadMedidaId: value.UnidadMedidaId,
                                PrecioVenta: value.PrecioVenta,
                                Cantidad: cantidad,
                                ValorUnitario: value.ValorUnitario,
                                Importe: cantidad * value.ValorUnitario,
                                StockSistema: value.StockSistema,
                                Cantidad: value.StockSistema
                            };
                            rowObject.push(bienServicios);
                        });
                    } else {
                        MsgAlert(3, response.message);
                    }

                },
                async: false
            });

            var newRowId;
            $.each(rowObject, function (item, value) {
                newRowId = gridRowCount("jqGridDetalle");
                var count = newRowId + 1;
                var cantidad = 1;
                var setcelll = {
                    rowID: newRowId + 1,
                    initdata: {
                        MovimientoAlmacenBienId: 0,
                        MovimientoAlmacenId: 0,
                        BienAlmacenId: value.BienAlmacenId,
                        BienServicioId: value.BienServicioId,
                        Codigo: value.Codigo,
                        CodigoComercial: value.CodigoComercial,
                        Descripcion: value.Descripcion,
                        MarcaId: value.MarcaId,
                        Control: 0,
                        UnidadMedidaId: value.UnidadMedidaId,
                        PrecioVenta: value.PrecioVenta,
                        Cantidad: cantidad,
                        ValorUnitario: value.ValorUnitario,
                        Importe: cantidad * value.ValorUnitario,
                        StockSistema: value.StockSistema,
                        Cantidad: value.StockSistema
                    },
                    position: "afterSelected"
                };
                jQuery("#jqGridDetalle").jqGrid('addRow', setcelll);
            });
    }

    function onClickOkProducto() {


         var rowKey = jQuery("#jqGridProducto").getGridParam("selrow");
        if (!isEmpty(rowKey)) {

            var jsonList = [];
            var selectedIDs = jQuery("#jqGridProducto").getGridParam("selarrrow");
            $.each(selectedIDs, function (item, value) {
                var rows = jQuery('#jqGridProducto').getRowData(value);
                jsonList.push(jQuery('#jqGridProducto').getRowData(value));
            });

            var rowList = _.map(jsonList, 'BienServicioId');
            var rowObject = [];
            jQuery.ajax({
                type: 'POST',
                url: '@Url.Action("ListarBienPrecio")',
                dataType: 'json',
                cache: false,
                data: {
                    data: JSON.stringify(rowList),
                    monedaId: $("#MonedaId").val(),
                    impuestoId: $("#ImpuestoId").val()
                },
                success: function (response) {
                    if (response.success) {
                        $.each(response.data.lista, function (item, value) {
                            var bienServicios = {
                                MovimientoAlmacenBienId: 0,
                                MovimientoAlmacenId: 0,
                                BienAlmacenId: value.BienAlmacenId,
                                BienServicioId: value.BienServicioId,
                                Codigo: value.Codigo,
                                CodigoComercial: value.CodigoComercial,
                                Descripcion: value.Descripcion,
                                MarcaId: value.MarcaId,
                                Control: 0,
                                UnidadMedidaId: value.UnidadMedidaId,
                                PrecioVenta: value.PrecioVenta,
                                Cantidad: cantidad,
                                ValorUnitario: value.ValorUnitario,
                                Importe: cantidad * value.ValorUnitario,
                                StockSistema: value.StockSistema,
                                Cantidad: value.StockSistema
                            };
                            rowObject.push(bienServicios);
                        });
                    } else {
                        MsgAlert(3, response.message);
                    }

                },
                async: false
            });

            var newRowId;
            $.each(rowObject, function (item, value) {
                newRowId = gridRowCount("jqGridDetalle");
                var count = newRowId + 1;
                var cantidad = 1;
                var setcelll = {
                    rowID: newRowId + 1,
                    initdata: {
                        MovimientoAlmacenBienId: 0,
                        MovimientoAlmacenId: 0,
                        BienAlmacenId: value.BienAlmacenId,
                        BienServicioId: value.BienServicioId,
                        Codigo: value.Codigo,
                        CodigoComercial: value.CodigoComercial,
                        Descripcion: value.Descripcion,
                        MarcaId: value.MarcaId,
                        Control: 0,
                        UnidadMedidaId: value.UnidadMedidaId,
                        PrecioVenta: value.PrecioVenta,
                        Cantidad: cantidad,
                        ValorUnitario: value.ValorUnitario,
                        Importe: cantidad * value.ValorUnitario
                    },
                    position: "afterSelected"
                };
                jQuery("#jqGridDetalle").jqGrid('addRow', setcelll);
            });

            jQuery("#myModalProducto").modal('hide');

        } else {
            MsgAlert(2, 'Seleccione almenos un articulo.');
        }

    }

    function onChangeRucCliente() {
        var rucCliente = $("#NumeroRuc").val();

        $.post('@Url.Action("BuscarPorRuc")', { numeroRuc: rucCliente }, function (response) {
            if (response.success) {
                var data = {  id: response.data.ClienteId,  text: response.data.RazonSocial };
                var newOption = new Option(data.text, data.id, false, false);
                $('#ClienteId').append(newOption).trigger('change');
                $("#NumeroRuc").val(response.data.NumeroDocumento);
                $("#Direccion").val(response.data.NombreDireccion);
            } else {
                alert();
            }
        });
    }

    function onChangeMovimiento(control) {
        $.post('@Url.Action("GetTipoOperacion", "Ingresos")',
         {
             codigo: control.value
            }, function (response) {
             $('#TipoOperacionId').find('option').remove().end();
             $("#TipoOperacionId").addItems(response.data);
             $("#TipoOperacionId").prop("disabled", false);
         });
    };

    function onChangeOperacion(control) {
          switch (control.value) {
              case "@TipoOperacionConstant.TRANSFERENCIA_ALMACENES":
                      $("#AlmacenDestinoId").prop('disabled', false);
                     break;
                 case "@TipoOperacionConstant.ORDEN_COMPRA":

                     break;
              default:
                  $("#AlmacenDestinoId").prop('disabled', true);
                  break;
             }
    }

    function onClickOkOrdenCom(row) {

        var rows = row;
        if (jQuery.isEmptyObject(rows)) {
            rows = getGridSelectedRow("jqGridOrdenCompra");
        }
        if (jQuery.isEmptyObject(rows)) {
            MsgAlert(3, "Seleccion orden de compra");
            return false;
        }


        $('#jqGridDetalle').jqGrid('clearGridData');
        $("#NumeroOrdenCompra").val(rows.OrdenCompra);


        $.post('@Url.Action("GetOrdenCompra", "Ingresos")',
         {
             orden: $("#NumeroOrdenCompra").val()
         }, function (response) {

             var data = { id: response.data.records.ClienteId, text: response.data.records.RazonSocial };
             var newOption = new Option(data.text, data.id, false, false);
             $('#ClienteId').append(newOption).trigger('change');
             $("#Direccion").val(response.data.records.NombreDireccion);
             $("#NumeroRuc").val(response.data.records.NumeroDocumento);
             $("#FechaEntrega").val(response.data.records.FechaEntrega);
             $('#FormaPagoId').val(response.data.records.FormaPagoId).trigger('change');
             $('#MonedaId').val(response.data.records.MonedaId).trigger('change');
             $('#ImpuestoId').val(response.data.records.ImpuestoId).trigger('change');
             $('#AlmacenId').val(response.data.records.AlmacenId).trigger('change');


             $.each(response.data.rows, function (item, value) {
                 newRowId = gridRowCount("jqGridDetalle");
                 var count = newRowId + 1;
                 var cantidad = 1;
                 var setcelll = {
                     rowID: newRowId + 1,
                     initdata: {
                         OrdenCompraBienId: 0,
                         OrdenCompraId: 0,
                         Codigo: value.Codigo,
                         CodigoComercial: value.CodigoComercial,
                         BienServicioId: value.BienServicioId,
                         BienAlmacenId: value.BienAlmacenId,
                         UnidadMedidaId: value.UnidadMedidaId,
                         MarcaId: value.MarcaId,
                         Descripcion: value.Descripcion,
                         ValorUnitario: value.ValorUnitario,
                         Cantidad: value.Cantidad,
                         Importe: value.ImporteTotal
                     },
                     position: "afterSelected"
                 };
                 jQuery("#jqGridDetalle").jqGrid('addRow', setcelll);

             });
         });

        $("#myModalOrdenCompra").modal('hide');
    }



    function onClickBienesMenuBar(key) {
        switch (key) {
            case "@ButtonMenuBarActionConstant.NEW":
                $('#myModalProducto').modal('show');
                break;
            case "@ButtonMenuBarActionConstant.SAVE":
                break;
            case "@ButtonMenuBarActionConstant.EDIT":
                break;
            case '@ButtonMenuBarActionConstant.CANCEL':
                break;
        }
    }

    function onRowLote(control) {
        var rowId = $(control).attr("data-value");
        var rowData = $('#jqGridDetalle').jqGrid('getRowData', rowId);
        var _cantidad = $("#" + rowId + "_Cantidad").val()
        if (_cantidad === undefined) {
            _cantidad = rowData.Cantidad;
        }
        $("#rowId").val(rowId);
        $("#rowBienId").val(control.value);
        $("#countId").val(_cantidad);
        $("#myModalLoteProducto").modal('show');
    }


    //function onClickOkLote() {

    //    var _validate = false;
    //    var _rowId = parseInt($("#rowId").val());
    //    gridDataIDs('jqGridForma').forEach(function (index) {
    //        var _lote = $("#" + index + "_NumeroLote").val();
    //        var _fechaExpira = $("#" + index + "_FechaExpira").val();
    //        if (_lote !== "" && _fechaExpira!== "") {
    //             _validate = true;
    //        }else {
    //            $("#" + index + "_NumeroLote").css("border","1px solid red");
    //            $("#" + index + "_FechaExpira").css("border", "1px solid red");
    //        }
    //    });

    //    if (!_validate) {
    //        MsgAlert(3, 'Por favor completa los campos requerido.');
    //    } else {
    //        gridDataIDs('jqGridForma').forEach(function (index) {
    //            $("#jqGridForma").jqGrid('saveRow', index, { url: 'clientArray' });
    //        });
    //        $("#myModalLoteProducto").modal('hide');
    //    }

    //    var jsonArray = $('#jqGridForma').getRowData();
    //    var jsonData = [];
    //    $.each(jsonArray, function (item, value) {
    //        value.actions = '';
    //        //value.Descripcion = '';
    //        jsonData.push(value);
    //    });
    //    //var rowData = $('#jqGridDetalle').jqGrid('getRowData', _rowId);
    //   // var jsonVal = JSON.stringify(data);
    //    var jString = JSON.stringify(jsonData);
    //    //rowData.RowsLst = JSON.stringify(jsonVal);
    //    //$('#jqGridDetalle').jqGrid('setRowData', _rowId, rowData);
    //    $("#jqGridDetalle").jqGrid("setCell", _rowId, "RowsLst", jString);


    //}

     function onClickOkLote() {

      var _validate = false;
      var _rowId = parseInt($("#rowId").val());
        gridDataIDs('jqGridForma').forEach(function (index) {
          var _numeroSerie = $("#"+index+"_NumeroSerie").val();
          var _lote = $("#" + index + "_NumeroLote").val();
          var _fechaExpira = $("#" + index + "_FechaExpira").val();
          var _fechaIngreso = $("#" + index + "_FechaIngreso").val();

            if (_lote !== "" && _fechaExpira !== "" && _numeroSerie !== "" && _fechaIngreso !== "") {
              _validate = true;
              $("#" + index + "_NumeroLote").css("border", "1px solid green");
              $("#" + index + "_FechaExpira").css("border", "1px solid green");
              $("#" + index + "_NumeroSerie").css("border", "1px solid green");
              $("#" + index + "_FechaIngreso").css("border", "1px solid green");
          } else {
              _validate = false;
              $("#" + index + "_NumeroLote").css("border", "1px solid red");
              $("#" + index + "_FechaExpira").css("border", "1px solid red");
              $("#" + index + "_NumeroSerie").css("border", "1px solid red");
              $("#" + index + "_FechaIngreso").css("border", "1px solid red");
          }
      });

      if (!_validate) {
          MsgAlert(3, 'Por favor completa los campos requerido.');
          return;
      } else {
          gridDataIDs('jqGridForma').forEach(function (index) {
              $("#jqGridForma").jqGrid('saveRow', index, { url: 'clientArray' });
          });
          $("#myModalLoteProducto").modal('hide');
        }


        var _validateMv = $("#MovimientoAlmacenId").val();
        if (_validateMv != "0") {
            gridDataIDs('jqGridForma').forEach(function (index) {
                $("#jqGridForma").jqGrid('saveRow', index, { url: 'clientArray' });
            });

            var form = $('#form1');
            var token = $('input[name="__RequestVerificationToken"]', form).val();
            var allData = $('#jqGridForma').getRowData();
            $.each(allData, function (item, value) {
                value.actions = '';
            });
            var jsonData = {
                __RequestVerificationToken: token,
                Header: JSON.stringify($('#form1').serializeObject()),
                Row: JSON.stringify(allData),
            };
            controllerSaveResponse("@Url.Action("CreateLote", "Inventario", new { area = "lg" })", jsonData, true, true, function (response) {
                if (response.success) {
                    MsgAlert(1, response.message);
                    $('#jqGridDetalle').jqGrid('setGridParam', { datatype: 'json' }).trigger('reloadGrid');
                    $("#myModalLoteProducto").modal('hide');
                } else {
                    MsgAlert(4, response.message);
                }
            });
        } else {

            var jsonArray = $('#jqGridForma').getRowData();
            var jsonData = [];
            $.each(jsonArray, function (item, value) {
                value.actions = '';
                value.Descripcion = '';
                jsonData.push(value);
            });


            var jString = JSON.stringify(jsonData);
            $("#jqGridDetalle").jqGrid("setCell", _rowId, "RowsLst", jString);
        }

    }
</script>
